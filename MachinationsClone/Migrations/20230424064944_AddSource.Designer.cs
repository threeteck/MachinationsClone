// <auto-generated />
using System;
using System.Collections.Generic;
using MachinationsClone;
using MachinationsClone.Models.Entities.Graph;
using MachinationsClone.Models.Entities.Graph;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MachinationsClone.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230424064944_AddSource")]
    partial class AddSource
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MachinationsClone.Models.Entities.Geometry.NodeGeometry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GraphNodeId")
                        .HasColumnType("uuid");

                    b.Property<double>("X")
                        .HasColumnType("double precision");

                    b.Property<double>("Y")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GraphNodeId")
                        .IsUnique();

                    b.ToTable("NodeGeometries");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.ConnectionType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LineType")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.ToTable("ConnectionTypes");

                    b.HasData(
                        new
                        {
                            Name = "resourceConnection",
                            Description = "A resource connection is an edge with an associated expression that defines the rate at which resources can flow between source and target nodes.",
                            LineType = 0
                        });
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.Graph", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CurrentStateId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentStatesGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("StepSize")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("CurrentStatesGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Graphs");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GraphId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Properties")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("GraphElements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GraphElement");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Dictionary<Guid, GraphElementState>>("GraphElementStates")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("GraphId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GraphStatesGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.HasIndex("GraphStatesGroupId");

                    b.ToTable("GraphStates");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphStatesGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GraphId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastStateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.HasIndex("LastStateId");

                    b.ToTable("GraphStatesGroups");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.NodeType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Exportable")
                        .HasColumnType("boolean");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("NodeTypes");

                    b.HasData(
                        new
                        {
                            Name = "pool",
                            Description = "A pool is a named node, that abstracts from an in-game entity, and can contain resources, such as coins, crystals, health, etc.",
                            Exportable = true,
                            Symbol = "pool"
                        },
                        new
                        {
                            Name = "source",
                            Description = "A source can be thought of as a pool with an infinite amount of resources, and therefore always pushes all resources or all resources are pulled from it.",
                            Exportable = false,
                            Symbol = "source"
                        });
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphConnection", b =>
                {
                    b.HasBaseType("MachinationsClone.Models.Entities.Graph.GraphElement");

                    b.Property<string>("ConnectionTypeName")
                        .HasColumnType("text");

                    b.Property<Guid?>("EndId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StartId")
                        .HasColumnType("uuid");

                    b.HasIndex("ConnectionTypeName");

                    b.HasIndex("EndId");

                    b.HasIndex("StartId");

                    b.HasDiscriminator().HasValue("GraphConnection");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphNode", b =>
                {
                    b.HasBaseType("MachinationsClone.Models.Entities.Graph.GraphElement");

                    b.Property<int>("ActivationMode")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NodeTypeName")
                        .HasColumnType("text");

                    b.Property<int>("PullMode")
                        .HasColumnType("integer");

                    b.HasIndex("NodeTypeName");

                    b.HasDiscriminator().HasValue("GraphNode");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Geometry.NodeGeometry", b =>
                {
                    b.HasOne("MachinationsClone.Models.Entities.Graph.GraphNode", "GraphNode")
                        .WithOne("NodeGeometry")
                        .HasForeignKey("MachinationsClone.Models.Entities.Geometry.NodeGeometry", "GraphNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GraphNode");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.Graph", b =>
                {
                    b.HasOne("MachinationsClone.Models.Entities.Graph.GraphState", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentStateId");

                    b.HasOne("MachinationsClone.Models.Entities.Graph.GraphStatesGroup", "CurrentStatesGroup")
                        .WithMany()
                        .HasForeignKey("CurrentStatesGroupId");

                    b.HasOne("MachinationsClone.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("CurrentStatesGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphElement", b =>
                {
                    b.HasOne("MachinationsClone.Models.Entities.Graph.Graph", "Graph")
                        .WithMany("GraphElements")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Graph");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphState", b =>
                {
                    b.HasOne("MachinationsClone.Models.Entities.Graph.Graph", "Graph")
                        .WithMany()
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachinationsClone.Models.Entities.Graph.GraphStatesGroup", "GraphStatesGroup")
                        .WithMany()
                        .HasForeignKey("GraphStatesGroupId");

                    b.Navigation("Graph");

                    b.Navigation("GraphStatesGroup");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphStatesGroup", b =>
                {
                    b.HasOne("MachinationsClone.Models.Entities.Graph.Graph", "Graph")
                        .WithMany()
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachinationsClone.Models.Entities.Graph.GraphState", "LastState")
                        .WithMany()
                        .HasForeignKey("LastStateId");

                    b.Navigation("Graph");

                    b.Navigation("LastState");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphConnection", b =>
                {
                    b.HasOne("MachinationsClone.Models.Entities.Graph.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeName");

                    b.HasOne("MachinationsClone.Models.Entities.Graph.GraphElement", "End")
                        .WithMany()
                        .HasForeignKey("EndId");

                    b.HasOne("MachinationsClone.Models.Entities.Graph.GraphElement", "Start")
                        .WithMany()
                        .HasForeignKey("StartId");

                    b.Navigation("ConnectionType");

                    b.Navigation("End");

                    b.Navigation("Start");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphNode", b =>
                {
                    b.HasOne("MachinationsClone.Models.Entities.Graph.NodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeName");

                    b.Navigation("NodeType");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.Graph", b =>
                {
                    b.Navigation("GraphElements");
                });

            modelBuilder.Entity("MachinationsClone.Models.Entities.Graph.GraphNode", b =>
                {
                    b.Navigation("NodeGeometry");
                });
#pragma warning restore 612, 618
        }
    }
}
